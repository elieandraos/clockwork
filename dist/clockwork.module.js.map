{"version":3,"file":"clockwork.module.js","sources":["../src/rules/index.js","../src/utils/index.js","../src/clockwork.js"],"sourcesContent":["const dayjs = require('dayjs')\n\nconst isSameOrAfter = require('dayjs/plugin/isSameOrAfter')\nconst isSameOrBefore = require('dayjs/plugin/isSameOrBefore')\nconst isLeapYear = require('dayjs/plugin/isLeapYear')\nconst isToday = require('dayjs/plugin/isToday')\nconst isTomorrow = require('dayjs/plugin/isTomorrow')\nconst isYesterday = require('dayjs/plugin/isYesterday')\nconst customParseFormat = require('dayjs/plugin/customParseFormat')\n\ndayjs.extend(isSameOrAfter)\ndayjs.extend(isSameOrBefore)\ndayjs.extend(isLeapYear)\ndayjs.extend(isToday)\ndayjs.extend(isTomorrow)\ndayjs.extend(isYesterday)\ndayjs.extend(customParseFormat)\n\nexport function required(value) {\n    if (Array.isArray(value) && value.length === 0) return false\n    else return ![null, undefined, ''].includes(value)\n}\n\nexport function string(value) {\n    return typeof value === 'string'\n}\n\nexport function array(value) {\n    return Array.isArray(value)\n}\n\nexport function integer(value) {\n    return Number.isInteger(value)\n}\n\nexport function numeric(value) {\n    return !Number.isNaN(parseFloat(value)) && isFinite(value)\n}\n\nexport function alpha(value) {\n    return string(value) && new RegExp('^[A-Za-z]+$').test(value.toLowerCase())\n}\n\nexport function alpha_numeric(value) {\n    return (\n        string(value) &&\n        new RegExp('^[a-zA-Z0-9\\\\s]+$').test(value.toLowerCase())\n    )\n}\n\nexport function alpha_dash(value) {\n    return (\n        string(value) && new RegExp('^[a-zA-Z-_]+$').test(value.toLowerCase())\n    )\n}\n\nexport function starts_with(value, arg = null) {\n    return string(value) && string(arg) && value.startsWith(arg)\n}\n\nexport function ends_with(value, arg = null) {\n    return string(value) && string(arg) && value.endsWith(arg)\n}\n\nexport function boolean(value) {\n    return [true, false].includes(value)\n}\n\nexport function is_in(value, arg = null) {\n    if (!string(arg) && !array(arg)) return false\n\n    arg = string(arg) ? arg.split(',') : arg\n    return arg.includes(value)\n}\n\nexport function not_in(value, arg = null) {\n    if (!string(arg) && !array(arg)) return false\n\n    return !is_in(value, arg)\n}\n\nexport function size(value, arg = null) {\n    return !string(value) && !array(value) ? false : value.length === arg\n}\n\nexport function min(value, arg = null) {\n    if (!value && !array(value)) {\n        return false\n    }\n\n    value = string(value) || array(value) ? value.length : value\n    return parseFloat(value) >= arg\n}\n\nexport function max(value, arg = null) {\n    if (!value && !array(value)) {\n        return false\n    }\n\n    value = string(value) || array(value) ? value.length : value\n    return parseFloat(value) <= arg\n}\n\nexport function same(value, arg = null) {\n    return typeof value === 'object'\n        ? JSON.stringify(value) === JSON.stringify(arg)\n        : value === arg\n}\nexport function different(value, arg = null) {\n    return !same(value, arg)\n}\n\nexport function url(value) {\n    return new RegExp(\n        '^(http:\\\\/\\\\/www\\\\.|https:\\\\/\\\\/www\\\\.|http:\\\\/\\\\/|https:\\\\/\\\\/)?[a-z0-9]+([\\\\-.][a-z0-9]+)*\\\\.[a-z]{2,5}(:[0-9]{1,5})?(\\\\/.*)?$'\n    ).test(String(value).toLowerCase())\n}\n\nexport function email(value) {\n    return new RegExp('^\\\\S+@\\\\S+[.][0-9a-z]+$').test(\n        String(value).toLowerCase()\n    )\n}\n\nexport function uuid(value) {\n    if (!string(value)) return false\n\n    return new RegExp(\n        '^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$'\n    ).test(String(value).toLowerCase())\n}\n\nexport function matches_regex(value, arg = null) {\n    if (!string(value)) return false\n\n    return new RegExp(arg).test(String(value).toLowerCase())\n}\n\nexport function json(value) {\n    if (!string(value)) return false\n\n    try {\n        return typeof JSON.parse(value) === 'object'\n    } catch (e) {\n        return false\n    }\n}\n\nexport function date(value) {\n    return dayjs(value).isValid()\n}\n\nexport function after(value, arg = null) {\n    return dayjs(value).isAfter(arg)\n}\n\nexport function before(value, arg = null) {\n    return dayjs(value).isBefore(arg)\n}\n\nexport function after_or_equal(value, arg = null) {\n    return dayjs(value).isSameOrAfter(arg)\n}\n\nexport function before_or_equal(value, arg = null) {\n    return dayjs(value).isSameOrBefore(arg)\n}\n\nexport function leap_year(value) {\n    return dayjs(value).isLeapYear()\n}\n\nexport function today(value) {\n    return dayjs(value).isToday()\n}\n\nexport function tomorrow(value) {\n    return dayjs(value).isTomorrow()\n}\n\nexport function yesterday(value) {\n    return dayjs(value).isYesterday()\n}\n\nexport function date_format(value, arg) {\n    return dayjs(value, arg, true).isValid()\n}\n","export function is_object(value) {\n    return !(\n        !value ||\n        Array.isArray(value) ||\n        typeof value !== 'object' ||\n        value.constructor !== Object\n    )\n}\n\nexport function is_empty_object(value) {\n    return is_object(value) && Object.keys(value).length === 0\n}\n\nexport const defaultErrorMessages = {\n    after: 'This field must be a date after \"{param}\"',\n    after_or_equal: 'This field must be a date after or equal to \"{param}\"',\n    alpha: 'This field must only contain letters',\n    alpha_dash: 'This field must only contain letters, dashes and underscores',\n    alpha_numeric: 'This field must only contain letters and numbers',\n    array: 'This field must be an array',\n    before: 'This field must be a date before \"{param}\"',\n    before_or_equal: 'This field must be a date before or equal to \"{param}\"',\n    boolean: 'This field must be boolean',\n    date: 'This field must be a valid date',\n    date_format: 'This date format must be \"{param}\"',\n    different: 'This field must be different than \"{param}\"',\n    email: 'This field must be a valid email.',\n    ens_with: 'This field must end with \"{param}\"',\n    integer: 'This field must be a number.',\n    is_in: 'This field must be one of \"{param}\"',\n    json: 'This field must be a json object',\n    leap_year: 'This date must be a leap year',\n    matches_regex: 'This field must match the regex \"{param}\"',\n    max: 'This field must not be greater than \"{param}\"',\n    min: 'This field must not be less than \"{param}\"',\n    not_in: 'This field must not be one of \"{param}\"',\n    numeric: 'This field must be numeric',\n    required: 'This field is required',\n    same: 'This field must be the same as \"{param}\"',\n    size: 'The field length must be \"{param}\"',\n    starts_with: 'This field must start with \"{param}\"',\n    string: 'This field must be a string',\n    today: 'This date must be today',\n    tomorrow: 'This date must be tomorrow',\n    url: 'This field must be a valid url',\n    uuid: 'This field must be a valid uuid',\n}\n","const Model = require('dot-prop')\nimport * as availableRules from './rules'\nimport { is_object, is_empty_object, defaultErrorMessages } from './utils'\n\nclass Clockwork {\n    /** public class properties **/\n    availableRules\n    defaultErrorMessages\n    customErrorMessages\n\n    /** private class properties **/\n    #data\n    #rules\n    #errorsBag\n\n    constructor() {\n        this.#data = {}\n        this.#rules = {}\n        this.#errorsBag = []\n\n        this.availableRules = availableRules\n        this.defaultErrorMessages = defaultErrorMessages\n        this.customErrorMessages = {}\n    }\n\n    setData(data) {\n        if (!is_object(data)) {\n            throw new Error('setData() argument must be an object.')\n        }\n\n        this.#data = data\n        return this\n    }\n\n    setRules(rules) {\n        if (!is_object(rules)) {\n            throw new Error('setRules() argument must be an object.')\n        }\n\n        this.#rules = rules\n        return this\n    }\n\n    setCustomErrorMessages(errorMessages) {\n        if (!is_object(errorMessages)) {\n            throw new Error(\n                'setCustomErrorMessages() argument must be an object.'\n            )\n        }\n\n        this.customErrorMessages = errorMessages\n        return this\n    }\n\n    getData() {\n        return this.#data\n    }\n\n    getRules() {\n        return this.#rules\n    }\n\n    getCustomErrorMessages() {\n        return this.customErrorMessages\n    }\n\n    passes() {\n        return this.#validate()\n    }\n\n    fails() {\n        return !this.passes()\n    }\n\n    hasErrors(dataKey) {\n        return !!this.getErrors(dataKey).length\n    }\n\n    // should add getAllErrors()\n    // returns an object of { dataKey: [allDataKeyErrors] }\n\n    getErrors(dataKey) {\n        return this.#errorsBag\n            .filter((error) => error.dataKey === dataKey)\n            .map((item) => item.message)\n    }\n\n    //should be renamed to getError() with second optional argument as rule name.\n    // if rule name is not passed, by default returns the first error\n    // if rule is name passed, get the dataKey.rule error.\n    getFirstError(dataKey) {\n        return this.hasErrors(dataKey) ? this.getErrors(dataKey)[0] : null\n    }\n\n    extend(name, closure) {\n        if (!name || !closure) {\n            throw new Error(\n                'extend() requires two arguments: name string and callback function'\n            )\n        }\n\n        if (this.availableRules.hasOwnProperty(name)) {\n            throw new Error('The rule \"' + name + '\" exists.')\n        }\n\n        if (\n            typeof closure !== 'function' ||\n            {}.toString.call(closure) !== '[object Function]'\n        ) {\n            throw new Error(\n                'The closure of the custom rule \"' +\n                    name +\n                    '\" should be a function.'\n            )\n        }\n\n        if (typeof closure() !== 'boolean')\n            throw new Error(\n                `The closure of the custom rule ${name} should return a boolean`\n            )\n\n        this.availableRules[name] = closure\n\n        return this\n    }\n\n    #validate() {\n        if (is_empty_object(this.#rules))\n            throw new Error(\n                'the rules object is missing. Use setRules() to set it'\n            )\n\n        if (is_empty_object(this.#data))\n            throw new Error(\n                'the data object is missing. Use setData() to set it'\n            )\n\n        this.#errorsBag = []\n\n        for (let [dataKey, rulesString] of Object.entries(this.#rules)) {\n            let value = Model.has(this.#data, dataKey)\n                ? Model.get(this.#data, dataKey)\n                : dataKey\n            let rules = this.#toArray(rulesString)\n\n            // do not validate any other rule if value is null and 'sometimes' rule exists.\n            if (rules.includes('sometimes') && !value) {\n                continue\n            }\n\n            rules.forEach((rule) => {\n                // do not execute the 'sometimes' rule, skip it & continue the loop\n                if (rule === 'sometimes') return\n\n                this.#executeRule(value, rule, dataKey)\n            })\n        }\n\n        return !this.#errorsBag.length\n    }\n\n    #toArray(rulesString) {\n        let rules = rulesString.split('|')\n\n        rules.forEach((rule, k) => {\n            rules[k] = rule.trim()\n        })\n\n        return rules\n    }\n\n    #parse(ruleString) {\n        let rule = ruleString\n        let arg = null\n\n        if (\n            typeof ruleString === 'string' &&\n            ruleString.split(':').length > 1\n        ) {\n            rule = ruleString.split(':')[0].trim()\n            arg = ruleString.split(':')[1].trim()\n\n            if (Model.has(this.#data, arg)) arg = Model.get(this.#data, arg)\n        }\n\n        return { rule: rule, arg: arg }\n    }\n\n    #executeRule(value, ruleString, dataKey) {\n        // check if the rule string contains any given argument\n        let { rule, arg } = this.#parse(ruleString)\n\n        // check if the rule exists in the available rules\n        if (!this.availableRules.hasOwnProperty(rule)) {\n            throw new Error('the rule \"' + rule + '\" does not exist.')\n        }\n\n        // run the rule\n        if (this.availableRules[rule](value, arg)) return\n\n        // add error to #errorsBag in case of failure\n        let errorMessage = this.#getErrorMessage(dataKey, rule, arg)\n        this.#addError(dataKey, rule, errorMessage)\n    }\n\n    #getErrorMessage(dataKey, rule, arg = null) {\n        let message\n        let key = dataKey + '.' + rule\n\n        if (this.customErrorMessages.hasOwnProperty(key))\n            message = this.customErrorMessages[key]\n        else {\n            if (this.defaultErrorMessages.hasOwnProperty(rule))\n                message = this.defaultErrorMessages[rule]\n            else\n                throw new Error(\n                    `Set a customer error message for the rule ${rule}`\n                )\n        }\n        return message.replace('{param}', arg)\n    }\n\n    #addError(dataKey, rule, errorMessage) {\n        let key = dataKey + '.' + rule\n\n        this.#errorsBag.push({\n            key: key,\n            dataKey: dataKey,\n            message: errorMessage,\n        })\n    }\n}\n\nexport default Clockwork\n"],"names":["dayjs","require","isSameOrAfter","isSameOrBefore","isLeapYear","isToday","isTomorrow","isYesterday","customParseFormat","string","value","array","Array","isArray","is_in","arg","split","includes","same","JSON","stringify","extend","length","undefined","Number","isInteger","isNaN","parseFloat","isFinite","RegExp","test","toLowerCase","startsWith","endsWith","String","parse","e","isValid","isAfter","isBefore","is_object","constructor","Object","is_empty_object","keys","defaultErrorMessages","after","after_or_equal","alpha","alpha_dash","alpha_numeric","before","before_or_equal","boolean","date","date_format","different","email","ens_with","integer","json","leap_year","matches_regex","max","min","not_in","numeric","required","size","starts_with","today","tomorrow","url","uuid","Model","Clockwork","_classPrivateFieldLooseBase","this","availableRules","customErrorMessages","setData","data","Error","setRules","rules","setCustomErrorMessages","errorMessages","getData","getRules","getCustomErrorMessages","passes","fails","hasErrors","dataKey","getErrors","filter","error","map","item","message","getFirstError","name","closure","hasOwnProperty","toString","call","rulesString","has","_this","get","forEach","rule","entries","k","trim","ruleString","errorMessage","key","replace","push"],"mappings":"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"}